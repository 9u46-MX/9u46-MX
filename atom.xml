<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://9u46-mx.github.io/</id>
    <title>9u46 的小窝</title>
    <updated>2020-03-08T10:56:16.179Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://9u46-mx.github.io/"/>
    <link rel="self" href="https://9u46-mx.github.io/atom.xml"/>
    <subtitle>by 9u46.</subtitle>
    <logo>https://9u46-mx.github.io/images/avatar.png</logo>
    <icon>https://9u46-mx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 9u46 的小窝</rights>
    <entry>
        <title type="html"><![CDATA[【题解】洛谷 P6194]]></title>
        <id>https://9u46-mx.github.io/post/Solution-luogu-P6198/</id>
        <link href="https://9u46-mx.github.io/post/Solution-luogu-P6198/">
        </link>
        <updated>2020-03-08T10:50:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="洛谷3月月赛苏联人">【洛谷3月月赛】苏联人</h2>
<p>一道很水的模拟。存完图之后对每个非空的点进行搜索。<br>
时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mn>8</mn><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(8^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<pre><code class="language-cpp"># ifndef cstdio_by_9u46_MX
# define cstdio_by_9u46_MX
# include &lt;cstdio&gt;
# endif

namespace Soviets {
    signed char inline gc() {
        signed char t;
        while (t = getchar(), t != '.' &amp;&amp; t != 'R' &amp;&amp; t != 'B');
        return t;
    }
    void const inline pc(bool const b) {
        putchar(b ? '1' : '0');
    }
    signed char Chess_Set[8][8];
    bool ans[8][8];

    void const inline begin() {
        for (short unsigned int register i(0); i &lt; 8; ++i)
            for (short unsigned int register j(0); j &lt; 8; ++j)
                ans[i][j] = (Chess_Set[i][j] = gc()) == '.';
    }
    void const inline end() {
        for (short unsigned int register i(0); i &lt; 8; ++i) {
            for (short unsigned int register j(0); j &lt; 8; ++j)
                pc(ans[i][j]);
            putchar('\n');
        }
    }

    void const inline work(short unsigned int const x, short unsigned int const y) {
        switch (Chess_Set[x][y]) {
        case 'R':
            for (short signed int register i(x - 1); i &gt;= 0 and Chess_Set[i][y] == '.'; --i) ans[i][y] = false;
            for (short signed int register i(x + 1); i &lt; 8 and Chess_Set[i][y] == '.'; ++i) ans[i][y] = false;
            for (short signed int register i(y - 1); i &gt;= 0 and Chess_Set[x][i] == '.'; --i) ans[x][i] = false;
            for (short signed int register i(y + 1); i &lt; 8 and Chess_Set[x][i] == '.'; ++i) ans[x][i] = false;
            break;
        case 'B':
            for (
                short signed int register i(x - 1), j(y - 1);
                i &gt;= 0 &amp;&amp; j &gt;= 0 and Chess_Set[i][j] == '.';
                --i, --j
            ) ans[i][j] = false;
            for (
                short signed int register i(x - 1), j(y + 1);
                i &gt;= 0 &amp;&amp; j &lt; 8 and Chess_Set[i][j] == '.';
                --i, ++j
            ) ans[i][j] = false;
            for (
                short signed int register i(x + 1), j(y - 1);
                i &lt; 8 &amp;&amp; j &gt;= 0 and Chess_Set[i][j] == '.';
                ++i, --j
            ) ans[i][j] = false;
            for (
                short signed int register i(x + 1), j(y + 1);
                i &lt; 8 &amp;&amp; j &lt; 8 and Chess_Set[i][j] == '.';
                ++i, ++j
            ) ans[i][j] = false;
            break;
        }
    }

    void const inline MAIN() {
        begin();
        for (short unsigned int register i(0); i &lt; 8; ++i)
            for (short unsigned int register j(0); j &lt; 8; ++j)
                if (Chess_Set[i][j] not_eq '.') work(i, j);
        end();
    }
}

signed int main() {
    Soviets::MAIN();
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【模板】读入/输出优化]]></title>
        <id>https://9u46-mx.github.io/post/Template-IO/</id>
        <link href="https://9u46-mx.github.io/post/Template-IO/">
        </link>
        <updated>2020-03-08T05:53:13.000Z</updated>
        <content type="html"><![CDATA[<p>会根据需要不断强化功能。</p>
<pre><code class="language-cpp"># ifndef IO_by_9u46_MX
# define IO_by_9u46_MX

# ifndef cctype_by_9u46_MX
# define cctype_by_9u46_MX
# include &lt;cctype&gt;
# endif
# ifndef cstdarg_by_9u46_MX
# define cstdarg_by_9u46_MX
# include &lt;cstdarg&gt;
# endif
# ifndef cstdio_by_9u46_MX
# define cstdio_by_9u46_MX
# include &lt;cstdio&gt;
# endif
namespace MX {
    namespace IO {
        typedef long long unsigned int LLU;
        void const inline _enter(); void const inline _space(); void const inline _nothing();
        void const (*enter)()(_enter), (*space)()(_space), (*nothing)()(_nothing);
        template&lt;typename T&gt; T inline read(); template&lt;typename T&gt; T inline read(T&amp;);
        template&lt;typename T&gt; void const inline write(T, void const (*)() = nothing);
        template&lt;typename T&gt; void const inline write(void const (*)(), LLU, ...);

        void const inline _enter() { putchar('\n'); }
        void const inline _space() { putchar(' '); }
        void const inline _nothing() {}
        template&lt;typename T&gt;
        T inline read() {
            signed char t;
            short signed int m(1);
            while (not isdigit(t = getchar())) if (t == '-') m = -m;
            T r(0);
            while (r = r * 10 + (t - '0') * m, isdigit(t = getchar()));
            return r;
        }
        template&lt;typename T&gt;
        T inline read(T&amp; a) {
            signed char t;
            short signed int m(1);
            while (not isdigit(t = getchar())) if (t == '-') m = -m;
            a = 0;
            while (a = a * 10 + (t - '0') * m, isdigit(t = getchar()));
            return a;
        }
        template&lt;typename T&gt;
        void const inline write(T a, void const (*space)()) {
            signed char s[20]; short unsigned int l(0);
            while (s[l++] = a % 10 + '0', a /= 10);
            while (l) putchar(s[--l]);
            space();
        }
        template&lt;typename T&gt;
        void const inline write(void const (*space)(), LLU count, ...) {
            va_list list;
            va_start(list, count);
            for (LLU register i(0); i &lt; count; ++i) write(va_arg(list, T), space);
            va_end(list);
        }
    }
}

# endif
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://9u46-mx.github.io/post/hello-gridea/</id>
        <link href="https://9u46-mx.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>